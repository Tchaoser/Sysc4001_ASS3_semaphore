reportPartD
    Analysis of Potential Deadlock or Livelock Conditions:

        After running the modified program multiple times, no persistent deadlock was observed. 
    The updated semaphore acquisition protocol attempts to acquire the first semaphore, 
    and if the second is not available, it releases the first one before trying again. 
    This prevents a scenario where each TA holds one semaphore and waits indefinitely for another,
    which is the classic deadlock scenario.

    Reasons No Deadlock Occurs:

        1. Modified Protocol: Instead of each TA process acquiring one semaphore and 
        then blocking on the second, the TA now releases the first semaphore if it cannot get the second. This prevents the stable condition where all TAs are stuck holding one semaphore and waiting for another.

        2. Random Delays and Non-Determinism: Each TA’s operation involves random delays 
        (1-4 seconds accessing the database, and 1-10 seconds marking). These random times 
        break symmetry and decrease the chance of all TAs attempting the same actions at the same time. 
        As a result, it is unlikely for them to fall into a perfect cycle that could cause livelock.

        3. Eventually Successful Acquisition: Because TAs release the first semaphore if the second is unavailable,
        resources keep getting freed up. Eventually, one TA will find both semaphores available and proceed.
        Once that TA moves forward, it releases both semaphores after accessing the database,
        giving another TA the chance to acquire them. This ensures continual progress.

    Potential Livelock:

        While a true deadlock scenario is prevented by the new protocol,
    a theoretical livelock situation could still occur if the timing causes TAs
    to continually pick up and release semaphores without anyone making progress. 
    However, due to the randomness and variability in execution, this situation is highly unlikely.
    In multiple test runs, such a livelock was not observed.

    Conclusion:

    No deadlock was observed during the test runs. 
    The combination of the revised semaphore acquisition approach and random delays 
    ensures that the TAs eventually break out of any temporary waiting conditions. 
    Each TA completes its three cycles through the student list without becoming permanently stuck.

reportPartE
    Discussion of Deadlock/Livelock Prevention:

    In the revised solution, we avoid both deadlock and livelock through a combination of strategy and randomness:

    Deadlock Prevention via Global Ordering:

    The core method used is to impose a strict global ordering on how each Teaching Assistant (TA)
    acquires semaphores. Instead of each TA always trying to pick up its “left” semaphore and then 
    its “right” one in a uniform manner, we compare the semaphore indices and order them consistently. 
    Each TA always acquires the lower-numbered semaphore first, and then the higher-numbered semaphore second, 
    regardless of which side is considered “left” or “right.”

    This approach effectively eliminates the circular waiting condition that leads to deadlock. 
    In classic deadlock scenarios, each process can be waiting for a resource held by another, forming a closed loop. 
    By having all TAs adhere to a global ordering (e.g., always acquire the semaphore with the smaller index before the 
    one with the larger index), we break that potential loop. No cycle of waiting can form, because there is a total order 
    on resource acquisition. Thus, deadlock cannot occur.

    Livelock Prevention via Random Delays:

    Livelock occurs when processes continually take actions but no actual progress 
    is made—they keep changing states in a pattern that repeats indefinitely. While global ordering
    eliminates stable deadlocks, could the TAs still repeatedly release and reacquire semaphores without 
    anyone making meaningful progress?

    We reduce this risk through the use of random delays. Each TA experiences random sleep times when accessing
    the database (1-4 seconds) and marking (1-10 seconds). These random delays break symmetry and make it extremely 
    unlikely that all TAs will continuously “dance around” acquiring and releasing semaphores in a stable pattern. 
    Instead, the randomness ensures that eventually one TA will proceed at a slightly different time than the others, 
    successfully acquiring both semaphores and making forward progress.

    With this non-deterministic timing, even if multiple TAs attempt to acquire resources simultaneously, small differences 
    in execution time, scheduling, and the inserted random waits ensure that at least one TA moves forward, allowing the system 
    to progress. Over time, all TAs will complete their tasks, demonstrating that livelock does not persist.

    Conclusion:

    By enforcing a strict global ordering on semaphore acquisition, we eliminate the conditions necessary for deadlock. 
    By incorporating random delays and non-deterministic timing, we prevent a stable pattern from forming that could lead to livelock. 
    Consequently, our process is both deadlock-free and livelock-free.